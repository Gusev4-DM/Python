'''
type(object) - класс объекта
id(object) - адрес в оперативной памяти
isinstance(object, classinfo) - принимает на вход объект и класс и возвращает истину, если объект
является экземпляром прямого или косвенного подкласса
is сравнивает пару объектов на идентичность
'''

##########################################

a = 5
a = 'hello world'
a = 42.0 * 3.141592 / 2.7

# Ошибки здесь не будет

a = 5
print(type(a))
a = 'hello world'
print(type(a))
a = 42.0 * 3.141592 / 2.7
print(type(a))

# все это class

a = 5
print(type(a), id(a))
a = 'hello world'
print(type(a), id(a))
a = 42.0 * 3.141592 / 2.7
print(type(a), id(a))

# Проверка на тип

data = 42
print(isinstance(data, int))

data = True
print(isinstance(data, int)) # Будет True потому что були это подклас инта

data = 3.14
print(isinstance(data, (int, float, complex))) # Выбирает является ли data одним из перечисленных типов

####################################################

num = 2 + 2 * 2
digit = 36 / 6
print(num, digit) # 6, 6.0
print(num == digit) # True
print(num is digit) # False, потому что разные объекты по сути


'''
Не изменяемые
1. None
2. Числа: int, bool, complex
3. Последовательности: str, tuple, bytes
4. Множества: set

Изменяемые
1. Последовательности: list, bytarray
2. Множества: frozenset
3. Отображения: dict
'''

a = c = 2
b = 3
print(a, id(a), b, id(b), c, id(c))
a = b + c
print(a, id(a), b, id(b), c, id(c))

# Хэш это криптографическая функция хэширования, которую обычно называют просто хэшем
# Хэш-функция представляет собой алгоритм, который может преобразовать произвольный массив данных в набор бит фиксированной длины.
# Функция hash(object) Возвращает hash объекта в виде целого числа

x = 42
y = 'text'
z = 3.1415
print(hash(x), hash(y), hash(z))
my_list = [x, y, z]
print(hash(my_list)) # получим ошибку, т.к list изменяемый

'''
Аннотация типов
'''

a: int = 42
# или a: int | float = 42
b: float = float(input('Введи число: '))
a = a / b # По сути ошибки нет т.к пайтон может работать с динамической типизацией но все равно обратит внимание что типы разные


def my_func(data: list[int, float]) -> float:
    """ После двоеточия я ожидаю получить список внутри которого будут только целые или вещественные числа.
    Далее стрелка обозначает что моя функция будет возвращать вещественные данные. """
    res = sum(data) / len(data)
    return res

print(my_func([2, 5.5, 15, 8.0, 13.74]))

'''
Есть модуль typing в котором куча типов данных которые могут использоваться или не использоваться часто
'''

'''
Объект, его атрибуты и методы
Атрибуты - переменные конкретные хар-ки объекта, такие как цвет поля или имя пользователя
Методы - фукнции, которые описаны внутри объекта или класса. Они относятся к определенному объекту и позволяют взаимодействовать с ними или другими частями кода
'''

print('hello world'.__doc__)
print(str.__doc__) # Описывает документацию str как и хелоу ворлд верную такую же документацию

# __doc__ это дандер метод. Хотя изначально является не методом а атрибутом.
 
print('hello world'.upper()) # Это метод. Переводит строку в верхний регистр
print('hello world'.count('l')) # И это метод. Считает количество значений указанных в скобке


# Функции для получения информации об атрибутах и метода


'''
Функция dir(object) Попытается вернуть список допустимых атрибутов для объекта.
Если объект не передавать - список имен в текущей локальной области.

Функция help(object) Запускает справочную систему, если объект не указан.
Если аргумент строка то эта строка ищется как имя модуля, функции, класса, метода, ключевого слова или раздела документации и далее выводится странциа справки.
Если аргументов является объект любого другого типа, создается страница справки по этому объекту.
'''

print(dir('Hello world')) # Сначала пойдут дандер методы, потом простые методы

help('hello world') # Выдаст ошибку т.к нет атрубута hello world
help(str) # Выдаст полноценную справку по str


'''
"Простые" объекты
'''

'''
Целые числа
int(x, base=10) Возвращает целочисленные объект соданный из числа или строки x ли возвращает значение 0, если агрументы не заданы. base - основание системы счисления от 2 до 36
bin(x) Преобразует целое число в двоичную строку с префиксом "0b"
oct(x) Преобразует целое число в восьмиричную систему строку с префиксом "0о"
hex(x) преобразует целое число в шестнадцатиричную строку с префисксом "0х"
'''

x = int('142')
y = int(3.1415)
z = int('hello', base=30)
print(x, y, z, sep='\n')

# Резиновый int

import sys

STEP = 2 ** 16
num = 1
for _ in range(30):
    print(sys.getsizeof(num), num)
    num *= STEP

'''
Вещественные числа
float(x) Возвращает число с плавающей запятой, составленное из числа или строки x
'''


'''
Логические типы
bools(x) Возвращает логиечские значения т.е одно из двух: True или False
'''


DEFAULT = 42
num = int(input('Введите уровень или ноль для значения по умолчанию: '))
level = num or DEFAULT # При вводе 0 выводит 42 потому что 0 приравнивается к False
print(level)

##############################################

name = input('как вас зовут?')
if name:
    print('Привет' + name)
else:
    print('Анонимус, приветствую')

# Не пустая строка приравнивается к истине и работает первый блок
# Пустая строка идет как ложь, срабатывает блок else

data = [0, 1, 2, 3, 4, 5]
while data:
    print(data.pop)

# Колекция которая содержит эелменты является истиной, а пустая ложью


'''
Строки и способы их записи
'''


# str(object'') - Возвращает строковую версию объекта

'''
class str(object)
    """
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str
    ...
    """
'''

text = 'Привет.' 'Как ты, друг?' 'Рад тебя видеть' # Не правильно, выведет слитно

long_text = 'Длинный текст ' \
            'будет идти ' \
            'в одну строку '

print(long_text)


'''
Конкатенация строк
'''


LIMIT = 120
ATTENTION = 'Внимание!'
name = input('Твое имя? ')
age = int(input('Твой возвраст? '))
text = ATTENTION + 'Хоть тебе и осталось' + str(100 - age) +\
        'до ста лет, но длина строки не должна превышать' + str(LIMIT) + 'слов' # При конкатенации при склейке строк через + все объекты должны быть строкой
print(text)


'''
Размер строки в памяти
'''


# object.__sizeof__() - Метод возвращает размер объекта в байтах

empty_str = ''
en_str = 'Text'
ru_str = 'Текст'

print(empty_str.__sizeof__())
print(en_str.__sizeof__())
print(ru_str.__sizeof__())


'''
Математика в Python
'''


# Математические модули
# import math
# import decimal
# import fraction

import math

print(math.pi, math.inf, math.nan, math.tau, sep='\n')
print(dir(math))
print(help(math.gcd))


# Модуль decimal. Точность


import decimal

num = decimal.Decimal(object) # Получаем вещественное число с точностью 29 знаков (до и псле запятой)
decimal.getcontext().prec = 120 # Например 120, это точность. Задаем точность в dec знаков для будущих операций

print(0.1 + 0.2)

pi = decimal.Decimal('3.141_592_653_589_793_238_462_643_383')
print(pi)
num = decimal.Decimal(1) / decimal.Decimal(3)
print(num)

decimal.getcontext().prec = 120
science = 2 * pi * decimal.Decimal(23.452346) ** 2
print(science)


# Модуль fraction. Запись дробей без потери точности


import fractions

f1 = fractions.Fraction(1, 3) # 1 - Верхнее значение знаменателя, 3 - нижнее значение. По сути числитель и знаменатель
print(f1) # Вывод - 1/3
f2 = fractions.Fraction(3, 5)
print(f2) # Вывод - 3/5
print(f1 * f2) # Вывод - 1/5


# Комплексные числа


# complex([real[, imag]]) - комплексное число из действительной real и мнимой imag частей

a = complex(2, 3)
b = complex('2+3j')
print(a, b, a == b, sep='\n')


# Математические функции "из коробки"

'''
abs(x) - Возвращает абсолютное значение числа х, число по модулю

divmod(a, d) - Функция принимает два числа в качестве аргументов и возвращает пару чисел.
Частное и остаток от целочисленного деления. Аналогично вычислению a // b и a % b

pow(base, exp[, mod]) - При передаче 2-х аргументов возводит base в степень exp.
При передаче 3-х аргументов, результат возведения в степень делится по модулю на значение mod.

round(number[, ndigit]) - округляет число number до ndigit цифр после запятой.
Если второгой аргумент не передать, округляет до ближайшего целого
'''

